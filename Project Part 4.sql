--DBST 651
--PROJECT - FINAL SUBMISSION
--JUSTIN HUGHES

--SET ECHO ON FOR THE SQL SCRIPT
set echo on;

--All Drop Statements (Tables with Foreign Keys Dropped First)
DROP VIEW Purchase_Orders;
DROP VIEW GSK_PRODUCTS;
Drop SEQUENCE seq_custid;
Drop SEQUENCE seq_ponumber;
DROP TRIGGER ORDERS_BEFORE_INSERT;
DROP TRIGGER CUSTOMER_UPDATE;
DROP TRIGGER AUTO_CUSTID;
DROP TRIGGER AUTO_ORDERID;
DROP TABLE INVENTORY;
DROP TABLE PO_CONTENTS;
DROP TABLE PRODUCTS;
DROP TABLE ORDERS;
DROP TABLE CUSTOMER;

--Create Statements for all 5 tables
CREATE TABLE CUSTOMER (
CUST_ID int NOT NULL PRIMARY KEY,
CUST_NAME varchar(255) NOT NULL UNIQUE,
CUST_ADDR varchar(255),
CUST_CITY varchar(255),
CUST_STATE varchar (2),
CUST_ZIP int,
CUST_PHONE int
);

CREATE TABLE ORDERS (
ORDER_ID int NOT NULL PRIMARY KEY,
ORDER_DATE date,
VENDOR_NAME varchar(255),
CUST_ID int REFERENCES CUSTOMER(CUST_ID)
);

CREATE TABLE PO_CONTENTS (
VENDOR_ITEM varchar(255) NOT NULL,
PACK_SIZE int NOT NULL,
PACK_PRICE NUMBER(6,2),
QTY_ORDERED int NOT NULL,
ORDER_ID int REFERENCES ORDERS(ORDER_ID),
CONSTRAINT PK_PURCHASEORDER PRIMARY KEY (ORDER_ID,VENDOR_ITEM)
);

--Holds Generic Information for Products
CREATE TABLE PRODUCTS (
PRODUCT_ID varchar (255) NOT NULL PRIMARY KEY,
PRODUCT_NAME varchar(255) NOT NULL UNIQUE,
CPT_CODE int,
MANUFACTURER varchar (255) NOT NULL,
FORM varchar(255)
);

--Holds Specific Information for Inventory
CREATE TABLE INVENTORY (
NDC_NUM int NOT NULL,
QTYONHAND int,
REORDER_POINT int,
LOT_NUM varchar(255),
PRODUCT_ID varchar (255) REFERENCES PRODUCTS(PRODUCT_ID),
ORDER_ID int REFERENCES ORDERS(ORDER_ID),
PRODUCT_NAME varchar(255) REFERENCES PRODUCTS(PRODUCT_NAME),
CONSTRAINT PK_INVITEM PRIMARY KEY (ORDER_ID,NDC_NUM,LOT_NUM)
);

--Creating Indexes for Foreign and Natural Keys, and anything containing a name
CREATE INDEX VENDORNAME
ON ORDERS(VENDOR_NAME);

CREATE INDEX PURCHASEORDER
ON PO_CONTENTS(ORDER_ID);

CREATE INDEX MANUFACTURER
ON PRODUCTS(MANUFACTURER);

CREATE INDEX NDCNUM
ON INVENTORY(NDC_NUM);

CREATE INDEX INVPRODUCTNAME
ON INVENTORY(PRODUCT_NAME);

CREATE INDEX LOTNUM
ON INVENTORY(LOT_NUM);

CREATE INDEX ONHANDINVENTORY
ON INVENTORY(NDC_NUM,QTYONHAND);

-- View to allow customer to search all products from a single manufacturer
CREATE VIEW GSK_PRODUCTS AS
SELECT DISTINCT MANUFACTURER,PRODUCT_NAME AS PRODUCTNAME
FROM PRODUCTS
WHERE MANUFACTURER = 'GSK';

--View to allows customer to search all PO's and contents placed for a particular customer
CREATE VIEW Purchase_Orders AS
SELECT DISTINCT CUSTOMER.CUST_NAME,ORDERS.ORDER_ID,ORDERS.ORDER_DATE
FROM CUSTOMER
INNER JOIN ORDERS ON ORDERS.CUST_ID = CUSTOMER.CUST_ID;

--Sequence for Customer ID
CREATE SEQUENCE seq_custid
MINVALUE 1
START WITH 1
INCREMENT BY 1
CACHE 10;

--Sequence for Order Number
CREATE SEQUENCE seq_ponumber
MINVALUE 1
START WITH 1
INCREMENT BY 1
CACHE 10;

--Trigger to Auto-Increment Customer ID
CREATE TRIGGER AUTO_CUSTID
BEFORE INSERT ON CUSTOMER
FOR EACH ROW 

BEGIN
  SELECT seq_custid.NEXTVAL
  INTO :new.cust_id
  FROM dual;
END;
/

--Trigger to Auto-Increment Order ID
CREATE TRIGGER AUTO_ORDERID
BEFORE INSERT ON ORDERS
FOR EACH ROW 

BEGIN
  SELECT seq_ponumber.NEXTVAL
  INTO :new.order_id
  FROM dual;
END;
/
--Trigger to update ORDER-DATE field in the ORDERS column when creating a new PO
CREATE TRIGGER ORDERS_BEFORE_INSERT
BEFORE INSERT
  ON ORDERS
  FOR EACH ROW
  
BEGIN
--Update ORDER-DATE field to current system date
:new.ORDER_DATE := sysdate;

end;

/

--Trigger to updates the Customer ID and Customer name in Orders Table when the Customer table is updated
CREATE TRIGGER CUSTOMER_UPDATE
AFTER UPDATE 
ON CUSTOMER.CUST_ID
FOR EACH ROW

BEGIN
UPDATE ORDERS
SET CUST_ID = :new.CUST_ID
WHERE CUST_ID = :old.CUST_ID;

END;
/



/*Once all objects have been created in the database, create SQL INSERT statements (DML) to populate each table with sample data. Then develop SQL SELECT statements to query your tables.

    INSERT statements - each table should have a minimum of 10 rows unless you have specific business rules that prevent it from having that many records.
    SELECT Statements - minimum 20 Queries. 

Note: You should have a minimum of 20 SQL select statements. Query 1 to 12 (see below) are required, plus at least 8 advanced queries. Each query should have comment/description to explain its business purpose, as well as which requirement item you are satisfying (i.e., --1. Select all columns and all rows from one table). Please submit both query statements and query results.

    

The deliverable would be two separate files: a consolidated source file in plain text (.txt or .sql file) including all your SQL statements (DDL to create your objects, INSERT statements to populate your tables, and your queries); and a consolidated, formatted Word document including all four parts of projects (SOW, requirements, ERD, your code as well as results of running your code).

The instructor and TA should be able to run your source file as script â€œas-isâ€? (without adjustments) to generate the same output as shown in your second file. It should run error free. The script should have standard Oracle comments for each SQL reflecting its business purpose, as well as which requirement item you are satisfying (i.e., --1. Select all columns and all rows from one table).*/

INSERT INTO CUSTOMER (CUST_NAME,CUST_ADDR,CUST_CITY,CUST_STATE,CUST_ZIP,CUST_PHONE) VALUES ('Heal All','948 Clopper Road','Gaithersburg', 'MD','20878','1112223333');
INSERT INTO CUSTOMER (CUST_NAME,CUST_ADDR,CUST_CITY,CUST_STATE,CUST_ZIP,CUST_PHONE) VALUES ('Dinosaurs and Associates','599 West State Street','Doylestown', 'PA','18901','2154892065');
INSERT INTO CUSTOMER (CUST_NAME,CUST_ADDR,CUST_CITY,CUST_STATE,CUST_ZIP,CUST_PHONE) VALUES ('Lighter Medical','2811 Linkhorne Drive','Lynchburg', 'VA','24503','4343841582');
INSERT INTO CUSTOMER (CUST_NAME,CUST_ADDR,CUST_CITY,CUST_STATE,CUST_ZIP,CUST_PHONE) VALUES ('Oldies Medical Group','3411 Olandwood Court','Olney', 'MD','20832','3017745265');
INSERT INTO CUSTOMER (CUST_NAME,CUST_ADDR,CUST_CITY,CUST_STATE,CUST_ZIP,CUST_PHONE) VALUES ('Greatest View Medical','3456 Bethlehem Pike','Souderton', 'PA','18964','2157216400');
INSERT INTO CUSTOMER (CUST_NAME,CUST_ADDR,CUST_CITY,CUST_STATE,CUST_ZIP,CUST_PHONE) VALUES ('2nd Choice Family Practice','6165 Fuller Court','Alexandria', 'VA','22310','7039249264');
INSERT INTO CUSTOMER (CUST_NAME,CUST_ADDR,CUST_CITY,CUST_STATE,CUST_ZIP,CUST_PHONE) VALUES ('Semi Urgent Care','911 That Hurts Lane','Rockville', 'MD','20850','1234567890');
INSERT INTO CUSTOMER (CUST_NAME,CUST_ADDR,CUST_CITY,CUST_STATE,CUST_ZIP,CUST_PHONE) VALUES ('Ironclad Medical','239 Lafayette Street','Newark', 'NJ','07105','9736905544');
INSERT INTO CUSTOMER (CUST_NAME,CUST_ADDR,CUST_CITY,CUST_STATE,CUST_ZIP,CUST_PHONE) VALUES ('Yellowbrick Road Village','1923 E Joyce Blvd','Fayetteville', 'AR','72703','4796958000');
INSERT INTO CUSTOMER (CUST_NAME,CUST_ADDR,CUST_CITY,CUST_STATE,CUST_ZIP,CUST_PHONE) VALUES ('Home Sweet Home','7340 Westmore Road','Rockville', 'MD','20850','3013545082');

INSERT INTO ORDERS (CUST_ID,ORDER_DATE,VENDOR_NAME) VALUES (1,'1-DEC-2017','FFF');
INSERT INTO ORDERS (CUST_ID,ORDER_DATE,VENDOR_NAME) VALUES (2,'4-OCT-2015','FFF');
INSERT INTO ORDERS (CUST_ID,ORDER_DATE,VENDOR_NAME) VALUES (3,'19-JUL-2017','ANDA');
INSERT INTO ORDERS (CUST_ID,ORDER_DATE,VENDOR_NAME) VALUES (4,'10-DEC-2017','CARDINAL');
INSERT INTO ORDERS (CUST_ID,ORDER_DATE,VENDOR_NAME) VALUES (5,'15-JAN-2017','VAXSERVE');
INSERT INTO ORDERS (CUST_ID,ORDER_DATE,VENDOR_NAME) VALUES (6,'10-DEC-2017','FFF');
INSERT INTO ORDERS (CUST_ID,ORDER_DATE,VENDOR_NAME) VALUES (6,'10-DEC-2017','ANDA');
INSERT INTO ORDERS (CUST_ID,ORDER_DATE,VENDOR_NAME) VALUES (8,'15-SEP-2016','ANDA');
INSERT INTO ORDERS (CUST_ID,ORDER_DATE,VENDOR_NAME) VALUES (2,'11-NOV-2017','FFF');
INSERT INTO ORDERS (CUST_ID,ORDER_DATE,VENDOR_NAME) VALUES (10,'9-DEC-2017','PFIZER');

INSERT INTO PO_CONTENTS (ORDER_ID,VENDOR_ITEM,PACK_SIZE,PACK_PRICE,QTY_ORDERED) VALUES (1,'FLUZONEV-FFF',10,123.10,1);
INSERT INTO PO_CONTENTS (ORDER_ID,VENDOR_ITEM,PACK_SIZE,PACK_PRICE,QTY_ORDERED) VALUES (2,'BOOSTV-FFF',10,85.42,1);
INSERT INTO PO_CONTENTS (ORDER_ID,VENDOR_ITEM,PACK_SIZE,PACK_PRICE,QTY_ORDERED) VALUES (2,'ADHAVRIXS-FFF',10,90.42,1);
INSERT INTO PO_CONTENTS (ORDER_ID,VENDOR_ITEM,PACK_SIZE,PACK_PRICE,QTY_ORDERED) VALUES (2,'FLUZONEV-FFF',10,123.10,1);
INSERT INTO PO_CONTENTS (ORDER_ID,VENDOR_ITEM,PACK_SIZE,PACK_PRICE,QTY_ORDERED) VALUES (3,'GARD9V-ANDA',10,112.47,1);
INSERT INTO PO_CONTENTS (ORDER_ID,VENDOR_ITEM,PACK_SIZE,PACK_PRICE,QTY_ORDERED) VALUES (3,'ADHAVRIXS-ANDA',10,90.42,1);
INSERT INTO PO_CONTENTS (ORDER_ID,VENDOR_ITEM,PACK_SIZE,PACK_PRICE,QTY_ORDERED) VALUES (4,'MENACTRAV-CARDINAL',5,48.22,1);
INSERT INTO PO_CONTENTS (ORDER_ID,VENDOR_ITEM,PACK_SIZE,PACK_PRICE,QTY_ORDERED) VALUES (5,'FLUZONEV-VXS',10,137.90,3);
INSERT INTO PO_CONTENTS (ORDER_ID,VENDOR_ITEM,PACK_SIZE,PACK_PRICE,QTY_ORDERED) VALUES (6,'PEDENGBS-FFF',10,242.11,1);
INSERT INTO PO_CONTENTS (ORDER_ID,VENDOR_ITEM,PACK_SIZE,PACK_PRICE,QTY_ORDERED) VALUES (6,'PEDHAVRIXS-FFF',10,172.11,1);
INSERT INTO PO_CONTENTS (ORDER_ID,VENDOR_ITEM,PACK_SIZE,PACK_PRICE,QTY_ORDERED) VALUES (7,'BOOSTV-ANDA',10,85.42,1);
INSERT INTO PO_CONTENTS (ORDER_ID,VENDOR_ITEM,PACK_SIZE,PACK_PRICE,QTY_ORDERED) VALUES (8,'MMRV-ANDA',10,93.24,2);
INSERT INTO PO_CONTENTS (ORDER_ID,VENDOR_ITEM,PACK_SIZE,PACK_PRICE,QTY_ORDERED) VALUES (8,'GARD9V-ANDA',10,112.47,1);
INSERT INTO PO_CONTENTS (ORDER_ID,VENDOR_ITEM,PACK_SIZE,PACK_PRICE,QTY_ORDERED) VALUES (9,'GARD9V-FFF',10,112.47,1);
INSERT INTO PO_CONTENTS (ORDER_ID,VENDOR_ITEM,PACK_SIZE,PACK_PRICE,QTY_ORDERED) VALUES (10,'PREV13-PFZ',10,758.92,1);

INSERT INTO PRODUCTS (PRODUCT_ID,PRODUCT_NAME,CPT_CODE,MANUFACTURER,FORM) VALUES ('FLUZONE_Q_0417_V','Fluzone Quadrivalent (IIV4) Vial 2017-2018',90686,'Sanofi','Vial');
INSERT INTO PRODUCTS (PRODUCT_ID,PRODUCT_NAME,CPT_CODE,MANUFACTURER,FORM) VALUES ('BOOSTRIX_0842_V','Boostrix (TdaP) Vial',90715,'GSK','Vial');
INSERT INTO PRODUCTS (PRODUCT_ID,PRODUCT_NAME,CPT_CODE,MANUFACTURER,FORM) VALUES ('PREVNAR_13_1971_S','Prevnar 13 (PCV 13)',90670,'Pfizer','Syringe');
INSERT INTO PRODUCTS (PRODUCT_ID,PRODUCT_NAME,CPT_CODE,MANUFACTURER,FORM) VALUES ('MENACTRA_0589_V','Menactra (MCV4) Vial',90734,'Sanofi','Vial');
INSERT INTO PRODUCTS (PRODUCT_ID,PRODUCT_NAME,CPT_CODE,MANUFACTURER,FORM) VALUES ('HAVRIX_0826_S','Havrix Adult 1,440 UNITS/ML Syringe',90632,'GSK','Syringe');
INSERT INTO PRODUCTS (PRODUCT_ID,PRODUCT_NAME,CPT_CODE,MANUFACTURER,FORM) VALUES ('GARDASIL_9_4119_V','Gardasil 9 (HPV9) Vial',90651,'Merck','Vial');
INSERT INTO PRODUCTS (PRODUCT_ID,PRODUCT_NAME,CPT_CODE,MANUFACTURER,FORM) VALUES ('HAVRIX_0825_S','Havrix Pediatric 720 UNITS/0.5 ML Syringe',90633,'GSK','Syringe');
INSERT INTO PRODUCTS (PRODUCT_ID,PRODUCT_NAME,CPT_CODE,MANUFACTURER,FORM) VALUES ('KINRIX_0812_V','Kinrix (DTaP IPV) Vial',90696,'GSK','Vial');
INSERT INTO PRODUCTS (PRODUCT_ID,PRODUCT_NAME,CPT_CODE,MANUFACTURER,FORM) VALUES ('M_M_R_II_4681_V', 'MMR II Vial',90707,'Merck','Vial');
INSERT INTO PRODUCTS (PRODUCT_ID,PRODUCT_NAME,CPT_CODE,MANUFACTURER,FORM) VALUES ('ENGERIX_B_0820_S', 'Engerix-B Pediatric 10 mcg/0.5 ml Syringe', 90744,'GSK','Syringe');


INSERT INTO INVENTORY (ORDER_ID,NDC_NUM,LOT_NUM,QTYONHAND,REORDER_POINT,PRODUCT_ID,PRODUCT_NAME) VALUES (1,49281041788,'AFLU424',9,4,'FLUZONE_Q_0417_V','Fluzone Quadrivalent (IIV4) Vial 2017-2018');
INSERT INTO INVENTORY (ORDER_ID,NDC_NUM,LOT_NUM,QTYONHAND,REORDER_POINT,PRODUCT_ID,PRODUCT_NAME) VALUES (2,49281041788,'AFLU424',7,4,'FLUZONE_Q_0417_V','Fluzone Quadrivalent (IIV4) Vial 2017-2018');
INSERT INTO INVENTORY (ORDER_ID,NDC_NUM,LOT_NUM,QTYONHAND,REORDER_POINT,PRODUCT_ID,PRODUCT_NAME) VALUES (2,58160084211,'B741K',3,4,'BOOSTRIX_0842_V','Boostrix (TdaP) Vial');
INSERT INTO INVENTORY (ORDER_ID,NDC_NUM,LOT_NUM,QTYONHAND,REORDER_POINT,PRODUCT_ID,PRODUCT_NAME) VALUES (2,58160082634,'AJRKJL4',6,4,'HAVRIX_0826_S','Havrix Adult 1,440 UNITS/ML Syringe');
INSERT INTO INVENTORY (ORDER_ID,NDC_NUM,LOT_NUM,QTYONHAND,REORDER_POINT,PRODUCT_ID,PRODUCT_NAME) VALUES (3,00006411903,'HPV8349',5,4,'GARDASIL_9_4119_V','Gardasil 9 (HPV9) Vial');
INSERT INTO INVENTORY (ORDER_ID,NDC_NUM,LOT_NUM,QTYONHAND,REORDER_POINT,PRODUCT_ID,PRODUCT_NAME) VALUES (3,58160082634,'AJRKJL4',10,4,'HAVRIX_0826_S','Havrix Adult 1,440 UNITS/ML Syringe');
INSERT INTO INVENTORY (ORDER_ID,NDC_NUM,LOT_NUM,QTYONHAND,REORDER_POINT,PRODUCT_ID,PRODUCT_NAME) VALUES (4,49281058905,'1561M',4,3,'MENACTRA_0589_V','Menactra (MCV4) Vial');
INSERT INTO INVENTORY (ORDER_ID,NDC_NUM,LOT_NUM,QTYONHAND,REORDER_POINT,PRODUCT_ID,PRODUCT_NAME) VALUES (5,49281041788,'AFLU424',9,4,'FLUZONE_Q_0417_V','Fluzone Quadrivalent (IIV4) Vial 2017-2018');
INSERT INTO INVENTORY (ORDER_ID,NDC_NUM,LOT_NUM,QTYONHAND,REORDER_POINT,PRODUCT_ID,PRODUCT_NAME) VALUES (6,58160082052,'JK19841',5,7,'ENGERIX_B_0820_S', 'Engerix-B Pediatric 10 mcg/0.5 ml Syringe');
INSERT INTO INVENTORY (ORDER_ID,NDC_NUM,LOT_NUM,QTYONHAND,REORDER_POINT,PRODUCT_ID,PRODUCT_NAME) VALUES (6,49281041788,'AFLU424',9,4,'HAVRIX_0825_S','Havrix Pediatric 720 UNITS/0.5 ML Syringe');
INSERT INTO INVENTORY (ORDER_ID,NDC_NUM,LOT_NUM,QTYONHAND,REORDER_POINT,PRODUCT_ID,PRODUCT_NAME) VALUES (7,58160084211,'B741LF',9,4,'BOOSTRIX_0842_V','Boostrix (TdaP) Vial');
INSERT INTO INVENTORY (ORDER_ID,NDC_NUM,LOT_NUM,QTYONHAND,REORDER_POINT,PRODUCT_ID,PRODUCT_NAME) VALUES (8,00006468100,'AFLU424',9,4,'M_M_R_II_4681_V', 'MMR II Vial');
INSERT INTO INVENTORY (ORDER_ID,NDC_NUM,LOT_NUM,QTYONHAND,REORDER_POINT,PRODUCT_ID,PRODUCT_NAME) VALUES (8,00006411903,'HPV8349',2,4,'GARDASIL_9_4119_V','Gardasil 9 (HPV9) Vial');
INSERT INTO INVENTORY (ORDER_ID,NDC_NUM,LOT_NUM,QTYONHAND,REORDER_POINT,PRODUCT_ID,PRODUCT_NAME) VALUES (9,00006411903,'HPV8349',1,4,'GARDASIL_9_4119_V','Gardasil 9 (HPV9) Vial');
INSERT INTO INVENTORY (ORDER_ID,NDC_NUM,LOT_NUM,QTYONHAND,REORDER_POINT,PRODUCT_ID,PRODUCT_NAME) VALUES (10,49281041788,'074AF56',8,4,'PREVNAR_13_1971_S','Prevnar 13 (PCV 13)');

-- 20 Queries
--1) Select all columns and all rows from one table.
SELECT * FROM PRODUCTS;

--2) Select 5 columns and all rows from one table.
SELECT CUST_NAME,CUST_ADDR,CUST_CITY,CUST_STATE,CUST_ZIP FROM CUSTOMER;

--3) Select all columns and all rows from one view.
SELECT * FROM GSK_PRODUCTS;

--4) Using a join on 2 tables, select all columns and all rows from the tables without the use of a Cartesian product. 
SELECT ORDERS.*, PO_CONTENTS.*
FROM ORDERS
JOIN PO_CONTENTS ON PO_CONTENTS.ORDER_ID = ORDERS.ORDER_ID;

--5) Select and order data retrieved from one table.
SELECT * FROM PRODUCTS
ORDER BY PRODUCT_NAME;

--6) Using a join on 3 tables, select 5 columns from the 3 tables. Use syntax that would limit the output to 10 rows.  
SELECT CUSTOMER.CUST_NAME,ORDERS.ORDER_ID,ORDERS.ORDER_DATE,PO_CONTENTS.VENDOR_ITEM,PO_CONTENTS.QTY_ORDERED
FROM CUSTOMER
	INNER JOIN ORDERS ON ORDER.CUST_ID = CUSTOMER.CUST_ID
	INNER JOIN PO_CONTENTS ON PO_CONTENTS.ORDER_ID = ORDERS.ORDER_ID
GROUP BY CUSTOMER.CUST_NAME,ORDERS.ORDER_ID,ORDERS.ORDER_DATE,PO_CONTENTS.VENDOR_ITEM,PO_CONTENTS.QTY_ORDERED
WHERE ROWNUM <= 10;

--7) Select distinct rows using joins on 3 tables. 
SELECT DISTINCT PO_CONTENTS.VENDOR_ITEM AS "Distinct Vendor Items", CUSTOMER.CUST_NAME,ORDERS.ORDER_DATE
from PO_CONTENTS
INNER JOIN ORDERS ON ORDERS.ORDER_ID = PO_CONTENTS.ORDER_ID
INNER JOIN CUSTOMER ON CUSTOMER.CUST_ID = ORDERS.CUST_ID;


--8) Use GROUP BY & HAVING in a select statement using one or more tables.
SELECT ORDERS.VENDOR_NAME, PO_CONTENTS.VENDOR_ITEM,PO_CONTENTS.PACK_PRICE
FROM ORDERS
INNER JOIN PO_CONTENTS ON PO_CONTENTS.ORDER_ID = ORDERS.ORDER_ID
GROUP BY ORDERS.VENDOR_NAME, PO_CONTENTS.VENDOR_ITEM,PO_CONTENTS.PACK_PRICE
HAVING PACK_PRICE > 100;

--9) Use IN clause to select data from one or more tables.
SELECT CUST_NAME AS "Customers in Maryland", CUST_ADDR,CUST_CITY,CUST_STATE
FROM CUSTOMER
WHERE CUST_STATE IN ('MD');

--10)Select length of one column from one table (use LENGTH function).
SELECT LENGTH(CUST_PHONE) FROM CUSTOMER;

--11) Use the SQL DELETE statement to delete one record from one table. Add select statements to demonstrate the table contents before and after the DELETE statement. Make sure to use ROLLBACK afterwards so that the data will not be physically removed.
--SAVEPOINT AND TABLE BEFORE:
SAVEPOINT SQL_BYEBYE;
SELECT PRODUCT_ID,PRODUCT_NAME FROM PRODUCTS;

--DELETE QUERY
DELETE FROM PRODUCTS WHERE PRODUCT_ID = 'KINRIX_0812_V';

--TABLE AFTER:
SELECT PRODUCT_ID,PRODUCT_NAME FROM PRODUCTS;

--ROLLBACK
ROLLBACK TO SAVEPOINT SQL_BYEBYE;


--12) Use the SQL UPDATE statement to change some data. Add select statements to demonstrate the table contents before and after the UPDATE statement. You can either COMMIT or ROLLBACK afterwards.
--SAVEPOINT AND TABLE BEFORE:
SAVEPOINT CUST_CHANGE;
SELECT CUST_ID,CUST_NAME FROM CUSTOMER;

--Update Query
UPDATE CUSTOMER 
SET CUST_NAME = '3rd Choice Family Practice'
WHERE CUST_NAME = '2nd Choice Family Practice';

--Table After
SELECT CUST_ID,CUST_NAME FROM CUSTOMER;

--ROLLBACK
ROLLBACK TO SAVEPOINT CUST_CHANGE;


--Perform 8 additional advanced (multiple table joins, sub-queries, aggregate, etc.) SQL statements.

--Custom 1) Select all "Fluzone" inventory from all practices
SELECT CUSTOMER.CUST_NAME, INVENTORY.PRODUCT_NAME, INVENTORY.QTYONHAND
FROM INVENTORY
INNER JOIN PO_CONTENTS ON PO_CONTENTS.ORDER_ID = INVENTORY.ORDER_ID
INNER JOIN ORDERS ON ORDERS.ORDER_ID = PO_CONTENTS.ORDER_ID
INNER JOIN CUSTOMER ON CUSTOMER.CUST_ID = ORDERS.CUST_ID
WHERE INVENTORY.PRODUCT_ID = 'FLUZONE_Q_0417_V';

--Custom 2) Select all inventory below the reorder point
SELECT CUSTOMER.CUST_NAME, INVENTORY.PRODUCT_NAME, INVENTORY.QTYONHAND, INVENTORY.REORDER_POINT
FROM INVENTORY
INNER JOIN PO_CONTENTS ON PO_CONTENTS.ORDER_ID = INVENTORY.ORDER_ID
INNER JOIN ORDERS ON ORDERS.ORDER_ID = PO_CONTENTS.ORDER_ID
INNER JOIN CUSTOMER ON CUSTOMER.CUST_ID = ORDERS.CUST_ID
WHERE INVENTORY.QTYONHAND > INVENTORY.REORDER_POINT;

--Custom 3) Select all orders occurring before August 2017
SELECT CUSTOMER.CUST_NAME,ORDERS.ORDER_ID,ORDERS.ORDER_DATE
FROM PO_CONTENTS
INNER JOIN ORDERS ON ORDERS.ORDER_ID = PO_CONTENTS.ORDER_ID
INNER JOIN CUSTOMER ON CUSTOMER.CUST_ID = ORDERS.ORDER_ID
GROUP BY CUSTOMER.CUST_NAME,ORDERS.ORDER_ID,ORDERS.ORDER_DATE
HAVING ORDERS.ORDER_DATE < '1-AUG-2017';

--Custom 4) Select All Inventory manufactured by Merck
SELECT CUSTOMER.CUST_NAME,PRODUCTS.MANUFACTURER,INVENTORY.PRODUCT_NAME,INVENTORY.QTYONHAND
FROM INVENTORY
INNER JOIN PRODUCTS ON PRODUCTS.PRODUCT_ID = INVENTORY.PRODUCT_ID
INNER JOIN PO_CONTENTS ON PO_CONTENTS.ORDER_ID = INVENTORY.ORDER_ID
INNER JOIN ORDERS ON ORDERS.ORDER_ID = PO_CONTENTS.ORDER_ID
INNER JOIN CUSTOMER ON CUSTOMER.CUST_ID = ORDERS.CUST_ID
WHERE PRODUCTS.MANUFACTURER = 'Merck';

--Custom 5) Select all items with duplicate lot numbers
SELECT CUSTOMER.CUST_NAME, INVENTORY.PRODUCT_NAME,INVENTORY.LOT_NUM,INVENTORY.QTYONHAND
FROM INVENTORY
INNER JOIN PO_CONTENTS ON PO_CONTENTS.ORDER_ID = INVENTORY.ORDER_ID
INNER JOIN ORDERS ON ORDERS.ORDER_ID = PO_CONTENTS.ORDER_ID
INNER JOIN CUSTOMER ON CUSTOMER.CUST_ID = ORDERS.CUST_ID
GROUP BY CUSTOMER.CUST_NAME, INVENTORY.PRODUCT_NAME,INVENTORY.LOT_NUM,INVENTORY.QTYONHAND
HAVING COUNT(INVENTORY.LOT_NUM) > 1;

--Custom 6) Select Products with no inventory
SELECT PRODUCTS.PRODUCT_ID,PRODUCTS.PRODUCT_NAME AS "Products with No Inventory"
FROM PRODUCTS
RIGHT OUTER JOIN INVENTORY ON INVENTORY.PRODUCT_ID = PRODUCTS.PRODUCT_ID
GROUP BY PRODUCTS.PRODUCT_ID,PRODUCTS.PRODUCT_NAME
HAVING COUNT (INVENTORY.PRODUCT_ID) = 0;


--Custom 7) Return all "Vial" inventory
SELECT CUSTOMER.CUST_NAME,PRODUCTS.FORM,INVENTORY.PRODUCT_NAME,INVENTORY.QTYONHAND
FROM INVENTORY
INNER JOIN PRODUCTS ON PRODUCTS.PRODUCT_ID = INVENTORY.PRODUCT_ID
INNER JOIN PO_CONTENTS ON PO_CONTENTS.ORDER_ID = INVENTORY.ORDER_ID
INNER JOIN ORDERS ON ORDERS.ORDER_ID = PO_CONTENTS.ORDER_ID
INNER JOIN CUSTOMER ON CUSTOMER.CUST_ID = ORDERS.CUST_ID
WHERE PRODUCTS.FORM = 'Vial';

--Custom 8) Return all Orders's with more than 1 item
SELECT CUSTOMER.CUST_NAME,ORDERS.ORDER_ID,ORDERS.ORDER_DATE,COUNT(PO_CONTENTS.VENDOR_ITEM) AS "Number of Items on Order"
FROM PO_CONTENTS
INNER JOIN ORDERS ON ORDERS.ORDER_ID = PO_CONTENTS.ORDER_ID
INNER JOIN CUSTOMER ON CUSTOMER.CUST_ID = ORDERS.ORDER_ID
GROUP BY CUSTOMER.CUST_NAME,ORDERS.ORDER_ID,ORDERS.ORDER_DATE
HAVING COUNT(PO_CONTENTS.VENDOR_ITEM) > 1;



	
